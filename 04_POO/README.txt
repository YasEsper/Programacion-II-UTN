#Trabajo Pr√°ctico ‚Äì Programaci√≥n Orientada a Objetos (POO)

Este trabajo pr√°ctico aborda la implementaci√≥n de una clase `Empleado` en Java, aplicando los principales conceptos de la Programaci√≥n Orientada a Objetos. El objetivo es modelar un sistema b√°sico de gesti√≥n de empleados, incorporando atributos, constructores, m√©todos sobrecargados, encapsulamiento y miembros est√°ticos.

---

##  Caso pr√°ctico: Clase `Empleado`

La clase `Empleado` incluye:

- Atributos privados: `id`, `nombre`, `puesto`, `salario`.
- Atributo est√°tico: `totalEmpleados`, como contador global.
- Constructores sobrecargados:
  - Uno completo con todos los par√°metros.
  - Uno parcial que asigna salario por defecto y genera `id` autom√°ticamente.
- M√©todos sobrecargados `actualizarSalario()`:
  - Por porcentaje (`double`)
  - Por monto fijo (`int`)
- M√©todo `toString()` sobrescrito para mostrar la informaci√≥n del empleado.
- M√©todo est√°tico `mostrarTotalEmpleados()` para consultar el contador.
- Encapsulamiento completo con `getters` y `setters`.

---

## üìÅ Estructura del m√≥dulo

- `Empleado.java`  
  Clase principal con atributos, constructores, m√©todos y l√≥gica de negocio.

- `Main.java`  
  Clase de prueba que instancia objetos, aplica m√©todos y muestra resultados por consola.

- `README.txt`  
  Resumen t√©cnico del trabajo pr√°ctico.

- `Trabajo Pr√°ctico - Introducci√≥n a la POO.pdf`  
  Documento te√≥rico con consignas, objetivos y marco conceptual.

---

## üéØ Objetivos del trabajo

- Aplicar los pilares de la POO: encapsulamiento, reutilizaci√≥n, modularidad.
- Comprender el uso de `this`, constructores sobrecargados y m√©todos est√°ticos.
- Practicar sobrecarga de m√©todos y visualizaci√≥n con `toString()`.
- Simular un sistema b√°sico de gesti√≥n de empleados.

---

## üõ†Ô∏è Tecnolog√≠as utilizadas

- **Lenguaje**: Java  
- **Entorno**: NetBeans / Visual Studio Code  
- **Entrada/Salida**: Consola est√°ndar (`System.out.println`, `Scanner`)

---

## üìù Notas

- El c√≥digo est√° comentado para facilitar la comprensi√≥n.
- Se recomienda ejecutar `Main.java` para validar el comportamiento de la clase.
- El dise√±o permite futuras extensiones como validaciones, simulaciones o integraci√≥n con UML.




